worker_processes  auto;

events { }

http {
  # Upstream to services reachable by container name on the docker network
  upstream auth_upstream {
    server auth-service:4001;    # container-internal port of auth-service
  }

  upstream eval_upstream {
    server evaluation-service:3002; # container-internal port of evaluation-service
  }

  server {
    listen 8080;

    # Gateway health probe
    location = /health {
      add_header Content-Type text/plain;
      return 200 "ok\n";
    }

    # /api/auth/* -> auth-service
    location /api/auth/ {
      # CORS for dev
      add_header Access-Control-Allow-Origin *;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS";
      add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With";

      # Preflight
      if ($request_method = OPTIONS) {
        return 204;
      }

      # drop "/api/auth/" before proxying
      proxy_pass http://auth_upstream;
      proxy_set_header Authorization $http_authorization;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Admin-only: trigger roster sync via gateway
    location = /api/integration/sync {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # VERY IMPORTANT: forward Authorization header (JWT)
        proxy_set_header Authorization $http_authorization;

        proxy_pass http://data-integration-service:7002/secure/sync/run;
    }

    # GET /api/integration/sync/status → data-integration (no special auth, but keep header)
    location = /api/integration/sync/status {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Authorization $http_authorization;
        proxy_pass http://data-integration-service:7002/internal/sync/status;
    }

    # /api/eval/* -> evaluation-service
    location = /api/eval/health {
      add_header Access-Control-Allow-Origin * always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;

      if ($request_method = OPTIONS) { return 204; }

      proxy_pass http://evaluation-service:3002/health/db;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /api/eval/ {
      add_header Access-Control-Allow-Origin * always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;

      if ($request_method = OPTIONS) { return 204; }

      proxy_pass http://evaluation-service:3002;
      proxy_set_header Authorization $http_authorization;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /demo/ {
      proxy_pass http://evaluation-service:3002/demo/;  # 注意末尾的斜杠！
      proxy_set_header Host $host;
    }
  }
}
